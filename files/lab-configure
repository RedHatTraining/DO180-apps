#!/bin/bash

# CHANGELOG
#   * Tue Aug 18 Jaime Ramirez <jaime.ramirez@redhat.com>
#   - Remove default values. They can be confusing
#   - Remove cluster id variable. Not used
#   - Match up key names exactly with the ones in the course
#   - Remove prompts for inferred values
#   - Save config values inmediately after they are read, so that students do not need to retype everything.
#   - Add message showing the config file path
#   * Wed May 31 Fernando Lozano <flozano@redhat.com>
#   - Add validation for GitHub account name
#   - Add validation for Quay.io account name
#   - Add validation for Nexus server
#   * Wed May 29 Fernando Lozano <flozano@redhat.com>
#   - Change order of prompts, so all info related to the OpenShift cluster is together
#   * Mon May 20 Fernando Lozano <flozano@redhat.com>
#   - Add a 'mode variable' that asks for a different sets of variables for 'development' and 'administration' courses
#   - Add variable for nexus and developer user name and password
#   - Add variable for github.com and quay.io account names
#   - Add variable for nexus host name
#   * Wed May 02 Fernando Lozano <flozano@redhat.com>
#   - Add variable for the bastion host; assumes a bastion that accepts the same key as any course VM
#   - Comment out API_DOMAIN variable: it creates the risk of having two valid ways of referring to services VM, registry, and so on
#   * Wed May 01 Razique Mahroua <rmahroua@redhat.com>
#   - Add API_DOMAIN variable
#   * Mon Apr 29 Razique Mahroua <rmahroua@redhat.com>
#   - Fix for cluster check
#   * Tue Apr 26 Fernando Lozano <flozano@redhat.com>
#   - Add variables for the services VM hostname and its registry alias
#   * Tue Apr 25 Fernando Lozano <flozano@redhat.com>
#   - Save copy of the kubeadmin auth files at ~student/auth for use by exercises
#   - Do NOT fail if the admin user and password are invalid
#   * Tue Apr 17 Fernando Lozano <flozano@redhat.com>
#   - Add check for the Master API URL which does not require valid credentials
#   * Tue Apr 09 Fernando Lozano <flozano@redhat.com>
#   - Remove cluster version variable
#   - Add wildcard domain variable
#   * Fri Apr 05 Fernando Lozano <flozano@redhat.com>
#   - initial version

# timeout for HTTP connections using curl and oc login, in seconds
TIMEOUT=6


function lab_config {

  # IMPORTANT: Keep this in sync with the course .shlib
  export RHT_OCP4_CONFIG=/usr/local/etc/ocp4.config
  export RHT_OCP4_DEFAULTS=/usr/local/etc/ocp4.defaults

  source ${RHT_OCP4_DEFAULTS} &>/dev/null
  if [ "$1" != "-d" ]; then
    source ${RHT_OCP4_CONFIG} &>/dev/null
  fi

  if [ "${RHT_OCP4_MODE}" != "development" -a "${RHT_OCP4_MODE}" != "administration" ]
  then
    fatal 88 "Invalid value for RHT_OCP4_MODE: '${RHT_OCP4_MODE}'"
  fi

  ### Start taking input from students

  # There are two levels of defaults: from the ocp4.defaults file and hard-coded here.
  local master_api="${RHT_OCP4_MASTER_API}"

  # Jim decided we should not validate the OpenShift version
  # local ocp_version="${RHT_OCP4_CLUSTER_VERSION:-4.0.0-0.X}"

  save_variable master_api 'API Endpoint'

  ### Initialize reasonable defaults for most variables

  # Derive default values for wildcard domain from the master api URL
  local api_hostname=$( echo "${master_api}" | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/' )
  local api_domain=$( echo "${api_hostname}" | sed -e 's/[^.]*\.//' )
  local wildcard_domain="apps.${api_domain}"

  # These variables are used only by development courses

  # Derive default values for nexus host from the master api URL
  local nexus_server="nexus-common.${wildcard_domain}"

  # developer user from IdM (or other IdP)
  local dev_user="${RHT_OCP4_DEV_USER}"
  local dev_passwd="${RHT_OCP4_DEV_PASSWORD}"
  local github_user="${RHT_OCP4_GITHUB_USER}"
  local quay_user="${RHT_OCP4_QUAY_USER}"

  # These variables are used only by administration courses

  # Save two copies of the kubeadmin auth files: one for lab scripts, other for
  # commands the student types in exercises
  local kube_auth_src="${RHT_OCP4_KUBEAUTH_SRC:-/home/student/Dowloads/auth.zip}"
  local kube_auth_lab="${RHT_OCP4_KUBEAUTH_LAB:-/root/auth}"
  local kube_auth_user="${RHT_OCP4_KUBEAUTH_USER:-/home/student/auth}"

  # IMPORTANT: the copy at RHT_OCP4_KUBEAUTH_LAB exists so lab scripts continue
  # working in the event that a student messes with his $HOME/auth copy of
  # kubeconfig and kubeadmin-password

  # admin user from htpasswd (or other IdP) is optional
  local admin_user="${RHT_OCP4_ADMIN_USER:-admin}"
  local admin_passwd="${RHT_OCP4_ADMIN_PASSWORD:-secret}"

  # Derive default values for services vm, private registry, and bastion host from the master api URL
  # local services_vm="${RHT_OCP4_SERVICES_VM:-services.${api_domain}}"
  # local priv_registry="${RHT_OCP4_PRIV_REGISTRY:-registry.${api_domain}}"
  local bastion_host="${RHT_OCP4_BASTION_HOST:-bastion.${api_domain}}"

  ### Continue taking input from students

  # readline ocp_version 'OpenShift version'

  if [ "${RHT_OCP4_MODE}" = "development" ]
  then
    # readline nexus_server 'Nexus Host'
    save_variable dev_user 'Username'
    save_variable dev_passwd 'Password'
    save_variable github_user 'GitHub Account Name'
    save_variable quay_user 'Quay.io Account Name'

  elif [ "${RHT_OCP4_MODE}" = "administration" ]
  then
    save_variable services_vm 'Services VM'
    save_variable priv_registry 'Private Registry'
    save_variable bastion_host 'Bastion Host'
    save_variable kube_auth_src 'Kubeadmin Auth Folder or Zip'
    save_variable admin_user 'Cluster Administrator User name'
    save_variable admin_passwd 'Cluster Administrator User Password'
  fi

  ### Display data provided by the student

  echo
  echo 'You entered:'
  echo -e " · API Endpoint:\t\t\t${master_api}"

  if [ "${RHT_OCP4_MODE}" = "development" ]
  then
    echo -e " · Username:\t\t\t\t${dev_user}"
    echo -e " · Password:\t\t\t\t${dev_passwd}"
    echo -e " · GitHub Account Name:\t\t\t${github_user}"
    echo -e " · Quay.io Account Name:\t\t${quay_user}"

  elif [ "${RHT_OCP4_MODE}" = "administration" ]
  then
    echo -e " · Services VM:\t\t\t\t${services_vm}"
    echo -e " · Private Registry:\t\t\t${priv_registry}"
    echo -e " · Bastion Host:\t\t\t${bastion_host}"
    echo -e " · Kubeadmin Auth Folder or Zip:\t${kube_auth_src}"
    echo -e " · Cluster Administrator User Name:\t${admin_user}"
    echo -e " · Cluster Administrator User Password:\t${admin_passwd}"
  fi

  ### Display generated config

  echo
  echo 'Generated config:'
  echo -e " · API Endpoint:\t\t\t${master_api}"
  echo -e " · Wildcard Domain:\t\t\t${wildcard_domain}"

  if [ "${RHT_OCP4_MODE}" = "development" ]
  then
    echo -e " · Nexus Server Host:\t\t\t${nexus_server}"
    echo -e " · Username:\t\t\t\t${dev_user}"
    echo -e " · Password:\t\t\t\t${dev_passwd}"
    echo -e " · GitHub Account Name:\t\t\t${github_user}"
    echo -e " · Quay.io Account Name:\t\t${quay_user}"

  elif [ "${RHT_OCP4_MODE}" = "administration" ]
  then
    echo -e " · Services VM:\t\t\t\t${services_vm}"
    echo -e " · Private Registry:\t\t\t${priv_registry}"
    echo -e " · Bastion Host:\t\t\t${bastion_host}"
    echo -e " · Kubeadmin Auth Folder or Zip:\t${kube_auth_src}"
    echo -e " · Cluster Administrator User Name:\t${admin_user}"
    echo -e " · Cluster Administrator User Password:\t${admin_passwd}"
  fi

  ### Verifying data from students

  echo
  echo 'Verifying your API Endpoint...'
  if ! curl --connect-timeout "${TIMEOUT}" -sk "${master_api}/apis/config.openshift.io/v1" &>/dev/null
  then
    fatal 2 "Cannot connect to an OpenShift 4 API using your URL." \
            "Please verify you network connectivity and that the URL does not point to an OpenShift 3.x nor to a non-OpenShift Kubernetes API."
  fi

  if [ "${RHT_OCP4_MODE}" = "development" ]
  then


    echo
    echo 'Verifying your Nexus host...'
    local nexus_frozen=$(curl --connect-timeout "${TIMEOUT}" -s --header 'Accept: application/json' "http://${nexus_server}/service/rest/v1/read-only" | jq ".frozen")
    if [ "${nexus_frozen}" != "false" ]
    then
      fatal 5 "Cannot find a Nexus server at http://${nexus_server}."
    fi

    echo
    echo 'Verifying your OpenShift developer user credentials...'
    if ! oc login --request-timeout "${TIMEOUT}s" -u "${dev_user}" -p "${dev_passwd}" --insecure-skip-tls-verify "${master_api}" &>/dev/null
    then
      fatal 4 "Cannot login to OpenShift using your developer credentials."
    fi

    #XXX surprisingly, this GitHub API works unauthenticated
    # https://developer.github.com/v3/search/#search-users
    echo
    echo 'Verifying your GitHub account name...'
    local github_user_name=$(curl --connect-timeout "${TIMEOUT}" -sk "https://api.github.com/search/users?q=${github_user}" | jq -r ".items[] | select(.type == \"User\") | select(.login == \"${github_user}\") | .login")
    if [ "${github_user_name}" != "${github_user}" ]
    then
      fatal 5 "Cannot find a GitHub account named: ${github_user}."
    fi

    #XXX surprisingly, this Quay.io API works unauthenticated
    # https://docs.quay.io/api/swagger/#!/user/getUserInformation
    echo
    echo 'Verifying your Quay.io account name...'
    local http_status=$( curl --connect-timeout "${TIMEOUT}" -sk -o /dev/null -w '%{http_code}' "https://quay.io/api/v1/users/${quay_user}" )
    if [ "${http_status}" != "200" ]
    then
      fatal 5 "Cannot find a Quay.io account named: ${quay_user}."
    fi

  elif [ "${RHT_OCP4_MODE}" = "administration" ]
  then

    echo
    echo 'Verifying your admin user credentials...'
    if ! oc login --request-timeout "${TIMEOUT}s" -u "${admin_user}" -p "${admin_passwd}" --insecure-skip-tls-verify "${master_api}" &>/dev/null
    then
      echo "Warning: Cannot login to OpenShift using your administrator credentials."
      echo "This is a problem only if you do not plan to authenticate using the kubeadmin user."
    fi

    echo
    echo 'Verifying your auth folder or zip...'

    kube_auth_tmp=$( mktemp -td kube_auth_XXX )
    # echo "*** tmp: ${kube_auth_tmp}"

    if [ "${kube_auth_src}" = "${kube_auth_user}" ]; then
      fatal 4 "You cannot use ${kube_auth_user} as the source for cluster auth files"
    fi
    if [ "${kube_auth_src}" = "${kube_auth_lab}" ]; then
      fatal 4 "You cannot use ${kube_auth_lab} as the source for cluster auth files"
    fi

    if [ -d "${kube_auth_src}" ]; then
      if ! cp "${kube_auth_src}"/* "${kube_auth_tmp}"; then
        fatal 4 "Cannot read files from your ${kube_auth_src} folder."
      fi
    elif [ -r "${kube_auth_src}" ]; then
      if [ "${kube_auth_src##*.}" != "zip" ]; then
        fatal 4 "Your ${kube_auth_src} is not a ZIP file."
      fi
      if ! unzip -q -j -d "${kube_auth_tmp}" "${kube_auth_src}"; then
        fatal 4 "Cannot unzip your ${kube_auth_src} file."
      fi
    else
      fatal 4 "I do not know what to do with ${kube_auth_src}." \
              "Please verify if it is either a folder or a ZIP file."
    fi

    if ! [ -r "${kube_auth_tmp}/kubeconfig" ]; then
      fatal 4 "${kube_auth_src} does not contain a kubeconfig file."
    fi
    if ! [ -r "${kube_auth_tmp}/kubeadmin-password" ]; then
      fatal 4 "${kube_auth_src} does not contain a kubeadmin-password file."
    fi

    echo
    echo 'Verifying your kubeadmin authentication files...'
    export KUBECONFIG="${kube_auth_tmp}/kubeconfig"
    if ! oc login --request-timeout "${TIMEOUT}s" -u kubeadmin -p $( cat "${kube_auth_tmp}/kubeadmin-password" ) --insecure-skip-tls-verify "${master_api}" &>/dev/null
    then
      fatal 2 "Cannot login to OpenShift using your auth folder or zip."
    fi

    #XXX need to change this to use a variable only for Gitweb
    echo
    echo 'Verifying your services VM...'
    local gitweb=$( curl --connect-timeout "${TIMEOUT}" -s "http://${services_vm}" | grep '<meta name="generator' | grep gitweb )
    if [ "${gitweb}" = "" ]
    then
      fatal 5 "Cannot find gitweb at http://${services_vm}."
    fi

    local http_status=$( curl --connect-timeout "${TIMEOUT}" -sk -o /dev/null -w '%{http_code}' "https://${priv_registry}/v2/" )
    if [ "${http_status}" != "200" ]
    then
      fatal 5 "Cannot find a v2 image registry at https://${priv_registry}."
    fi

    # The bastion host uses the pre-configured lab_rsa.pub key from the workstation VM
    if ! ssh -o "ConnectTimeout=${TIMEOUT}" -o "StrictHostKeyChecking=no" "ec2-user@${bastion_host}" hostname &>/dev/null
    then
      fatal 5 "Cannot open a SSH session to ${bastion_host}."
    fi

  fi

  # Perform these checks in the end because they require an authenticated user

  #XXX OCP4 allows only cluster admins to view these resources by default.
  #XXX Need to add permissions to everyone for these checks to work
  #XXX see rht-developer.yaml and rht-develer-binding.yaml

  echo
  echo 'Verifying your cluster configuration...'
  local actual=$(oc get ingresscontroller default -n openshift-ingress-operator -o jsonpath='{.status.domain}')
  if [ "${actual}" != "${wildcard_domain}" ]
  then
    fatal 3 "OpenShift reports a different wildcard domain: ${actual}."
  fi

  #  local actual=$(oc get clusterversion version -o jsonpath='{.status.desired.version}')
  #  if [ "${actual}" != "${ocp_version}" ]
  #  then
  #    fatal 3 "OpenShift reports a different cluster version: ${actual}."
  #  fi

  ### All good, save the config file

  echo
  echo 'Saving your lab configuration file...'

  save_config

  if [ "${RHT_OCP4_MODE}" = "administration" ]
  then

    echo
    echo 'Saving your kubeadmin auth files...'

    if ! ( sudo rm -rf "${kube_auth_lab}" && sudo mkdir "${kube_auth_lab}" )
    then
      fatal 99 "Cannot save your lab auth files."
    fi
    if ! ( sudo rm -rf "${kube_auth_user}" && sudo mkdir "${kube_auth_user}" )
    then
      fatal 99 "Cannot save your user auth files."
    fi

    sudo cp -f "${kube_auth_tmp}/kubeconfig" "${kube_auth_tmp}/kubeadmin-password" "${kube_auth_lab}"
    sudo cp -f "${kube_auth_tmp}/kubeconfig" "${kube_auth_tmp}/kubeadmin-password" "${kube_auth_user}"
    sudo chown -R student:student "${kube_auth_user}"
    rm -rf "${kube_auth_tmp}"

  fi

  ### Tell students we are done

  echo
  echo -e '\e[32m\e[1mAll fine, lab config saved. You can now proceed with your exercises.\e[0m'
  echo
  echo -e "If you need to modify the configuration, rerun this script or directly modify the values in \e[1m${RHT_OCP4_CONFIG}\e[0m."
  echo
}


function error {
  echo -e "\e[91m$@\e[0m" 1>&2
}


function fatal {
  local code="$1"

  rm -rf "${kube_auth_tmp}"
  error ''
  error '\e[1mERROR:'

  while [ "$2" != "" ]; do
    error "$2"
    shift
  done

  exit $code
}


function save_variable {
  local variable_name="$1"
  local prompt_msg="$2"

  readline $variable_name "$prompt_msg"

  save_config
}


function readline {
  local return_var="$1"
  local prompt_msg="$2"

  local input_line=''

  while [ "${input_line}" = '' ]; do
    echo -n
    read -e -p " · Enter the ${prompt_msg}: " -i "${!return_var}" input_line
    if  [ "${input_line}" = '' ]; then
      echo "   ${prompt_msg} cannot be empty. Try again."
    fi
  done

  eval $return_var="'${input_line}'"
}


function save_config {
  if ! sudo touch "${RHT_OCP4_CONFIG}"
  then
    fatal 99 "Cannot save your lab configuration."
  fi

  sudo bash -c "cat <<EOF > ${RHT_OCP4_CONFIG}
RHT_OCP4_MASTER_API=${master_api}
RHT_OCP4_WILDCARD_DOMAIN=${wildcard_domain}
EOF"

  if [ "${RHT_OCP4_MODE}" = "development" ]
  then

    sudo bash -c "cat <<EOFDEV >> ${RHT_OCP4_CONFIG}
RHT_OCP4_NEXUS_SERVER=${nexus_server}
RHT_OCP4_DEV_USER=${dev_user}
RHT_OCP4_DEV_PASSWORD=${dev_passwd}
RHT_OCP4_GITHUB_USER=${github_user}
RHT_OCP4_QUAY_USER=${quay_user}
EOFDEV"

  elif [ "${RHT_OCP4_MODE}" = "administration" ]
  then

    sudo bash -c "cat <<EOFADM >> ${RHT_OCP4_CONFIG}
RHT_OCP4_SERVICES_VM=${services_vm}
RHT_OCP4_PRIV_REGISTRY=${priv_registry}
RHT_OCP4_BASTION_HOST=${bastion_host}
RHT_OCP4_KUBEAUTH_SRC=${kube_auth_src}
RHT_OCP4_KUBEAUTH_LAB=${kube_auth_lab}
RHT_OCP4_KUBEAUTH_USER=${kube_auth_user}
RHT_OCP4_ADMIN_USER=${admin_user}
RHT_OCP4_ADMIN_PASSWORD=${admin_passwd}
EOFADM"

  fi
}


if ! which oc &>/dev/null
then
  fatal 1 "Cannot find the 'oc' command in your PATH"
fi

echo
echo 'This script configures the connection parameters to access the OpenShift cluster for your lab scripts'
echo

if [ "$1" != "-d" -a "$1" != "" ]; then
  echo "Usage: $( basename $0 ) [-h|-d]"
  echo
  echo -e "  -h: displays this help message"
  echo -e "  -d: start from defaults instead of starting from last saved config"
  echo
else
  lab_config "$@"
fi
